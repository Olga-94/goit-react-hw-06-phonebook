{"version":3,"sources":["App.styled.jsx","Title/Title.jsx","Components/Contacts/Form/contactForm.styled.jsx","Components/Contacts/Form/Form.jsx","Components/Contacts/List/contactList.styled.jsx","Components/Contacts/List/List.jsx","Components/Filter/Filter.jsx","App.js","index.js"],"names":["Container","styled","div","SectionTitle","h2","Title","title","Form","Label","Input","Button","ContactForm","onSubmit","formik","useFormik","initialValues","name","number","validationSchema","Yup","matches","required","values","setSubmitting","resetForm","handleSubmit","type","onChange","handleChange","value","touched","errors","id","disabled","isSubmitting","ListContainer","ListItem","ContactList","contacts","onDeleteContact","map","onClick","Filter","App","initialContacts","useState","JSON","parse","window","localStorage","getItem","setContacts","filter","setFilter","useEffect","setItem","stringify","visibleContacts","normalFilter","toLowerCase","contact","includes","getVisibleContact","find","alert","nanoid","prevContacts","e","currentTarget","contactId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7d40b3c9.chunk.js","sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  width: 500px;\n  // color: #ab8116;\n  background: #e3da8a;\n  box-shadow: 0px 5px 8px #785c14;\n  padding: 30px;\n  border-radius: 4px;\n  margin: 20px auto;\n`;\n\nexport const SectionTitle = styled.h2`\n  margin-bottom: 25px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #8a2154;\n  color: #f7eed7;\n  border-radius: 2px;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { SectionTitle } from '../App.styled';\n\nfunction Title({ title }) {\n  return <SectionTitle>{title}</SectionTitle>;\n}\n\nTitle.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n\nexport default Title;\n","import styled from '@emotion/styled/macro';\n\nexport const Form = styled.form``;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  max-width: 400px;\n  margin-bottom: 25px;\n`;\n\nexport const Input = styled.input`\n  width: 440px;\n  border: 1px solid lightblue;\n  border-radius: 4px;\n  font-size: 20px;\n  &:focus {\n    outline: none;\n    border: 1px solid #8a2154;\n  }\n`;\n\nexport const Button = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin: 25px auto;\n  min-width: 200px;\n  padding: 2px 32px;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n  border-radius: 4px;\n  border-style: none;\n  cursor: pointer;\n  font-weight: bold;\n  font-size: 16px;\n  line-height: 1.88;\n  letter-spacing: 0.06em;\n  color: #ffffff;\n  background-color: #cf2d7b;\n\n  & svg {\n    height: 18px;\n    width: 18px;\n    margin-right: 10px;\n  }\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { IoPersonAddOutline } from 'react-icons/io5';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { Form, Label, Input, Button } from './contactForm.styled';\n\nexport default function ContactForm({ onSubmit }){\n\n   const formik = useFormik({\n     initialValues: {\n       name: '',\n       number: '',\n     },\n     validationSchema: Yup.object({\n       name: Yup.string()\n         .matches(/^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/, 'Имя может состоять только из букв, апострофа, тире и пробелов.')\n         .required('Oбязательное поле'),\n       number: Yup.string()\n         .matches(/\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/, 'Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +')\n         .required('Oбязательное поле'),\n     }),\n     onSubmit: (values, { setSubmitting, resetForm }) => {\n       onSubmit(values);\n       setSubmitting(false);\n       resetForm()\n     },\n   });\n  \n   return (\n     <Form onSubmit={formik.handleSubmit}>\n       <Label>Name\n       <Input\n         name=\"name\"\n         type=\"text\"\n         onChange={formik.handleChange}\n         value={formik.values.name}\n         />\n       {formik.touched.name && formik.errors.name ? (\n         <>{formik.errors.name}</>\n         ) : null}\n         </Label>\n \n       <Label>Number\n       <Input\n         id=\"number\"\n         name=\"number\"\n         type=\"text\"\n         onChange={formik.handleChange}\n         value={formik.values.number}\n         />\n       {formik.touched.number && formik.errors.number ? (\n         <>{formik.errors.number}</>\n       ) : null}\n       </Label>\n\n       <Button type=\"submit\" disabled={formik.isSubmitting}>\n         <IoPersonAddOutline />\n         Add contact\n       </Button>\n     </Form>\n   );\n}\n \nContactForm.propTypes = {\n    onSubmit: PropTypes.func,\n}\n\n// export default function ContactForm({ onSubmit }) {\n//   return (\n//     <Formik\n//       initialValues={{ name: '', number: '' }}\n//       validate={values => {\n//         const errors = {};\n//         if (!values.name) {\n//           errors.name = 'Обязательное поле';\n//         } else if (!values.number) {\n//           errors.number = 'Обязательное поле';\n//         } else if (\n//           !/^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/i.test(\n//             values.name,\n//           )\n//         ) {\n//           errors.name =\n//             'Имя может состоять только из букв, апострофа, тире и пробелов.';\n//         } else if (\n//           !/\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/i.test(\n//             values.number,\n//           )\n//         ) {\n//           errors.number =\n//             'Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +';\n//         }\n//         return errors;\n//       }}\n//       onSubmit={(values, { setSubmitting, resetForm }) => {\n//         onSubmit(values);\n//         setSubmitting(false);\n//         resetForm();\n//       }}\n//     >\n//       {({\n//         values,\n//         errors,\n//         touched,\n//         handleChange,\n//         handleSubmit,\n//         isSubmitting,\n//       }) => (\n//         <Form onSubmit={handleSubmit}>\n//           <Label>\n//             {' '}\n//             Name\n//             <Input\n//               type=\"text\"\n//               name=\"name\"\n//               onChange={handleChange}\n//               value={values.name}\n//             />\n//           </Label>\n//           {errors.name && touched.name && errors.name}\n//           <Label>\n//             {' '}\n//             Number\n//             <Input\n//               type=\"tel\"\n//               name=\"number\"\n//               onChange={handleChange}\n//               value={values.number}\n//             />\n//           </Label>\n//           {errors.number && touched.number && errors.number}\n//           <Button type=\"submit\" disabled={isSubmitting}>\n//             <IoPersonAddOutline />\n//             Add contact\n//           </Button>\n//         </Form>\n//       )}\n//     </Formik>\n//   );\n// }\n\n// ContactForm.propTypes = {\n//   onSubmit: PropTypes.func,\n// };\n","import styled from '@emotion/styled/macro';\n\nexport const ListContainer = styled.ul`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const ListItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 25px;\n  max-width: 450px;\n  & svg {\n    width: 18px;\n    height: 18px;\n  }\n`;\n\nexport const Button = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  min-width: 200px;\n  padding: 2px 32px;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n  border-radius: 4px;\n  border-style: none;\n  cursor: pointer;\n  font-weight: bold;\n  font-size: 16px;\n  line-height: 1.88;\n  letter-spacing: 0.06em;\n  color: #ffffff;\n  background-color: #ad7892;\n  & svg {\n    color: #fff;\n    height: 18px;\n    width: 18px;\n    margin-right: 10px;\n  }\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FiPhone } from 'react-icons/fi';\nimport { AiFillDelete } from 'react-icons/ai';\nimport { ListContainer, ListItem, Button } from './contactList.styled';\n\nexport default function ContactList({ contacts, onDeleteContact }) {\n  return (\n    <ListContainer>\n      {contacts.map(({ id, name, number }) => (\n        <ListItem key={id}>\n          <FiPhone />\n          {name}: {number}\n          <Button onClick={() => onDeleteContact(id)}>\n            <AiFillDelete />\n            Delete\n          </Button>\n        </ListItem>\n      ))}\n    </ListContainer>\n  );\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      number: PropTypes.string,\n    }),\n  ),\n  onDeleteContact: PropTypes.func,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Label, Input } from '../Contacts/Form/contactForm.styled';\n\nfunction Filter({ value, onChange }) {\n  return (\n    <Label>\n      Find contacts by name\n      <Input type=\"text\" value={value} onChange={onChange} />\n    </Label>\n  )\n}\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\nexport default Filter;\n","import React, { useState, useEffect } from 'react';\nimport { nanoid } from 'nanoid';\nimport { Container } from './App.styled';\nimport Title from './Title/Title';\nimport ContactForm from './Components/Contacts/Form/Form';\nimport ContactList from './Components/Contacts/List/List';\nimport Filter from './Components/Filter/Filter';\n\nexport default function App() {\n\n  const initialContacts = [\n    { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n    { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n    { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n    { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    { id: 'id-5', name: 'Olga Bezdetko', number: '596-91-79' },\n  ];\n    \n\n  const [contacts, setContacts] = useState(() => {\n    return JSON.parse(window.localStorage.getItem('contacts')) ?? initialContacts});\n  const [filter, setFilter] = useState('');\n\n  useEffect(() => {\n    window.localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n  \n\n  const addContact = ({ name, number }) => {\n    if (contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase(),\n      )\n    ) {\n      alert(`${name} is already in contacts`);\n      return\n    }\n\n    const contact = {\n      id: nanoid(),\n      name,\n      number,\n    }\n      setContacts(prevContacts => [contact, ...contacts])\n  }\n\n  const changeFilter = (e) => {\n    setFilter(e.currentTarget.value);\n  };\n\n  const getVisibleContact = () => {\n    const normalFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalFilter)\n    );\n  }\n\n  const deleteContact = (contactId) => {\n      setContacts(prevContacts => prevContacts.filter(contact => contact.id !== contactId)\n      )\n  }\n\n    const visibleContacts = getVisibleContact();\n    return (\n      <Container>\n        <Title title={'Phonebook'} />\n        <ContactForm onSubmit={addContact} />\n        <Filter value={filter} onChange={changeFilter} />\n        <Title title={'Contacts'} />\n        <ContactList\n          contacts={visibleContacts}\n          onDeleteContact={deleteContact}\n        />\n      </Container>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}